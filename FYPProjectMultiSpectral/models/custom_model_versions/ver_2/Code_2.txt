# Custom Model Version 2
class CustomModelV2(BaseModel):
    def __init__(self, class_weights, num_classes, in_channels, model_weights, main_path):
        custom_model_2 = nn.Sequential(
            # Spectral Mixing 
            nn.Conv2d(in_channels, 16, kernel_size=1, stride=1, padding=0, bias=False),
            nn.BatchNorm2d(16),
            nn.ReLU(inplace=True),

            # -- Block 1 --
            DepthwiseSeparableConv(in_channels=16, out_channels=32, kernel_size=3, stride=1, padding=1, 
                                   dilation=1, bias=False, padding_mode='zeros'),  
            nn.BatchNorm2d(32),
            nn.ReLU(inplace=True),
            ResidualBlock(in_channels=32, out_channels=32, stride=1), 
            SpectralAttention(in_channels=32),
            CoordinateAttention(in_channels=32, reduction=16),

            # -- Block 2 --
            DepthwiseSeparableConv(in_channels=32, out_channels=64, kernel_size=3, stride=1, padding=1, 
                                   dilation=1, bias=False, padding_mode='zeros'),  
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            MultiScaleBlock(in_channels=64, out_channels=64, kernel_size=3, stride=1, groups=1, bias=False, padding_mode='zeros'),
            ResidualBlock(in_channels=64, out_channels=64, stride=1),  
            ECA(in_channels=64), 

            # -- BLock 3 -- 
            DepthwiseSeparableConv(in_channels=64, out_channels=128, kernel_size=3, stride=1, padding=1, 
                                   dilation=1, bias=False, padding_mode='zeros'), 
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            MultiScaleBlock(in_channels=128, out_channels=128, kernel_size=3, stride=1, groups=1, bias=False, padding_mode='zeros'),
            ResidualBlock(in_channels=128, out_channels=128, stride=1), 
            SE(in_channels=128, kernel_size=1), 

            # -- Block 4 -- 
             DepthwiseSeparableConv(in_channels=128, out_channels=256, kernel_size=3, stride=1, padding=1, 
                                   dilation=1, bias=False, padding_mode='zeros'), 
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            ResidualBlock(in_channels=256, out_channels=256, stride=1), 
            DualAttention(in_channels=256, kernel_size=3, stride=1),

            # Global Pool and Classifier
            nn.AdaptiveAvgPool2d(1),
            nn.Flatten(),
            nn.Dropout(ModelConfig.dropout),
            nn.Linear(256, num_classes)
        )
        super(CustomModelV2, self).__init__(custom_model_2, num_classes, class_weights, in_channels, main_path)
