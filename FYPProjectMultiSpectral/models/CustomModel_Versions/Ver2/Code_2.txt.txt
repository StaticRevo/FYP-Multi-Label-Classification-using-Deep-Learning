custom_model = nn.Sequential(
            # Spectral Mixing 
            nn.Conv2d(in_channels, 16, kernel_size=1, stride=1, padding=0, bias=False),
            nn.BatchNorm2d(16),
            nn.ReLU(inplace=True),

            # -- Block 1 --
            DepthwiseSeparableConv(16, 32, kernel_size=3, stride=1, padding=1, bias=False),
            nn.BatchNorm2d(32),
            nn.ReLU(inplace=True),
            ResidualBlock(in_channels=32, out_channels=32, stride=1), # Residual Block (32->32)  
            SpectralAttention(in_channels=32), # SpectralAttention Module
            CoordinateAttention(32),

            # -- Block 2 --
            DepthwiseSeparableConv(32, 64, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(64),
            nn.ReLU(inplace=True),
            MultiScaleBlock(64, 64),
            ResidualBlock(in_channels=64, out_channels=64, stride=1), # Residual Block (64->64) 
            ECA(in_channels=64, k_size=3), # ECA Module

            # -- BLock 3 -- 
            DepthwiseSeparableConv(64, 128, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(128),
            nn.ReLU(inplace=True),
            MultiScaleBlock(128, 128),
            ResidualBlock(in_channels=128, out_channels=128, stride=1), # Residual Block (128->128) 
            SE(in_channels=128), # Squeeze and Excitation Module

            # -- Block 4 -- 
            DepthwiseSeparableConv(128, 256, kernel_size=3, stride=2, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(inplace=True),
            ResidualBlock(in_channels=256, out_channels=256, stride=1), # Residual Block (256->256)
            DualAttention(in_channels=256), # DualAttention Module

            # Global Pool and Classifier
            nn.AdaptiveAvgPool2d(1),
            nn.Flatten(),
            nn.Dropout(ModelConfig.dropout),
            nn.Linear(256, num_classes)
        )